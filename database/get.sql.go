// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: get.sql

package database

import (
	"context"
)

const getAllAAAARecords = `-- name: GetAllAAAARecords :many
SELECT id, name, value, ttl
FROM aaaa_records
`

func (q *Queries) GetAllAAAARecords(ctx context.Context) ([]AaaaRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllAAAARecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AaaaRecord
	for rows.Next() {
		var i AaaaRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllARecords = `-- name: GetAllARecords :many
SELECT id, name, value, ttl
FROM a_records
`

func (q *Queries) GetAllARecords(ctx context.Context) ([]ARecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllARecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ARecord
	for rows.Next() {
		var i ARecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCnameRecords = `-- name: GetAllCnameRecords :many
SELECT id, name, value, ttl
FROM cname_records
`

func (q *Queries) GetAllCnameRecords(ctx context.Context) ([]CnameRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllCnameRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CnameRecord
	for rows.Next() {
		var i CnameRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMxRecords = `-- name: GetAllMxRecords :many
SELECT id, name, priority, value, ttl
FROM mx_records
`

func (q *Queries) GetAllMxRecords(ctx context.Context) ([]MxRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllMxRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MxRecord
	for rows.Next() {
		var i MxRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Priority,
			&i.Value,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSoaRecords = `-- name: GetAllSoaRecords :many
SELECT id, name, ns, mbox, serial, refresh, retry, expire, ttl
FROM soa_records
`

func (q *Queries) GetAllSoaRecords(ctx context.Context) ([]SoaRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllSoaRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SoaRecord
	for rows.Next() {
		var i SoaRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ns,
			&i.Mbox,
			&i.Serial,
			&i.Refresh,
			&i.Retry,
			&i.Expire,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSrvRecords = `-- name: GetAllSrvRecords :many
SELECT id, name, target, priority, weight, port, ttl
FROM srv_records
`

func (q *Queries) GetAllSrvRecords(ctx context.Context) ([]SrvRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllSrvRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SrvRecord
	for rows.Next() {
		var i SrvRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Target,
			&i.Priority,
			&i.Weight,
			&i.Port,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTxtRecords = `-- name: GetAllTxtRecords :many
SELECT id, name, priority, value, ttl
FROM txt_records
`

func (q *Queries) GetAllTxtRecords(ctx context.Context) ([]TxtRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllTxtRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TxtRecord
	for rows.Next() {
		var i TxtRecord
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Priority,
			&i.Value,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
