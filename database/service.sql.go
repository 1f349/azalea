// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: service.sql

package database

import (
	"context"
)

const getAllServiceRecords = `-- name: GetAllServiceRecords :many
SELECT id, service, type, value, lat, long
FROM service_records
`

func (q *Queries) GetAllServiceRecords(ctx context.Context) ([]ServiceRecord, error) {
	rows, err := q.db.QueryContext(ctx, getAllServiceRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceRecord
	for rows.Next() {
		var i ServiceRecord
		if err := rows.Scan(
			&i.ID,
			&i.Service,
			&i.Type,
			&i.Value,
			&i.Lat,
			&i.Long,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServices = `-- name: GetAllServices :many
SELECT id, name, available
FROM services
`

func (q *Queries) GetAllServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getAllServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Name, &i.Available); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBestLocationResolvedRecord = `-- name: GetBestLocationResolvedRecord :one
SELECT service_records.id, service_records.service, service_records.type, service_records.value, service_records.lat, service_records.long, SQRT(POWER(? - service_records.lat, 2) + POWER(? - service_records.long, 2)) AS distance
FROM service_records
         INNER JOIN services s ON s.id = service_records.service
WHERE s.name = ?
  AND s.available
ORDER BY distance
LIMIT 1
`

type GetBestLocationResolvedRecordParams struct {
	Lat  float64 `json:"lat"`
	Long float64 `json:"long"`
	Name string  `json:"name"`
}

type GetBestLocationResolvedRecordRow struct {
	ID       int64   `json:"id"`
	Service  int64   `json:"service"`
	Type     string  `json:"type"`
	Value    string  `json:"value"`
	Lat      float64 `json:"lat"`
	Long     float64 `json:"long"`
	Distance float64 `json:"distance"`
}

func (q *Queries) GetBestLocationResolvedRecord(ctx context.Context, arg GetBestLocationResolvedRecordParams) (GetBestLocationResolvedRecordRow, error) {
	row := q.db.QueryRowContext(ctx, getBestLocationResolvedRecord, arg.Lat, arg.Long, arg.Name)
	var i GetBestLocationResolvedRecordRow
	err := row.Scan(
		&i.ID,
		&i.Service,
		&i.Type,
		&i.Value,
		&i.Lat,
		&i.Long,
		&i.Distance,
	)
	return i, err
}
